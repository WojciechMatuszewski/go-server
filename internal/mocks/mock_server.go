// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rauljordan/go-server/server (interfaces: Server)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/rauljordan/go-server/internal/db"
	server "github.com/rauljordan/go-server/server"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockServer) Config() *server.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*server.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockServerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockServer)(nil).Config))
}

// Database mocks base method
func (m *MockServer) Database() db.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(db.Database)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockServerMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockServer)(nil).Database))
}

// ShouldAuthenticatePath mocks base method
func (m *MockServer) ShouldAuthenticatePath(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldAuthenticatePath", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldAuthenticatePath indicates an expected call of ShouldAuthenticatePath
func (mr *MockServerMockRecorder) ShouldAuthenticatePath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldAuthenticatePath", reflect.TypeOf((*MockServer)(nil).ShouldAuthenticatePath), arg0)
}
